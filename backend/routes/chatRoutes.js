const express = require("express");
const connection = require("../db");
const verifyToken = require("../middleware/auth");
const axios = require("axios");
const axiosRetry = require("axios-retry").default;
const rateLimit = require("express-rate-limit");
const cache = require("memory-cache");
require("dotenv").config();

const router = express.Router();

// Kh·ªüi t·∫°o PQueue b·∫•t ƒë·ªìng b·ªô
let geminiQueue;

// H√†m kh·ªüi t·∫°o queue
(async () => {
    const { default: PQueue } = await import("p-queue");
    geminiQueue = new PQueue({
        concurrency: 1,
        intervalCap: 1,
        interval: 2000, // TƒÉng l√™n 2 gi√¢y
    });
})();

// C·∫•u h√¨nh axios-retry ƒë·ªÉ th·ª≠ l·∫°i khi g·∫∑p l·ªói 429
axiosRetry(axios, {
    retries: 5, // TƒÉng s·ªë l·∫ßn th·ª≠ l·∫°i
    retryDelay: (retryCount, error) => {
        const retryAfter = error.response?.headers["retry-after"] || retryCount * 10; // M·∫∑c ƒë·ªãnh 10 gi√¢y
        console.log(`‚è≥ Ch·ªù ${retryAfter} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        return retryAfter * 1000;
    },
    retryCondition: (error) => error.response?.status === 429,
});

// C·∫•u h√¨nh rate limiting cho endpoint /ask-ai
const askAiLimiter = rateLimit({
    windowMs: 60 * 1000,
    max: 10,
    keyGenerator: (req) => req.user.id,
    message: "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau 1 ph√∫t.",
});

// Th√™m endpoint /api/ping ƒë·ªÉ ki·ªÉm tra m·∫°ng
router.get("/api/ping", (req, res) => {
    res.status(200).json({ success: true, message: "Server is alive" });
});

// H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
const removeAccents = (str) => {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ƒë/g, "d").replace(/ƒê/g, "D");
};

// üîπ Danh s√°ch t·ª´ kh√≥a ƒë·ªÉ k√≠ch ho·∫°t hi·ªÉn th·ªã s·∫£n ph·∫©m
const triggerKeywords = [
    "danh s√°ch", "h√£y l·∫•y", "l·∫•y cho tui", "l·∫•y", "mu·ªën", "nguy√™n li·ªáu", "c√¥ng th·ª©c",
    "cho tui", "t√¨m", "c√≥ nh·ªØng", "li·ªát k√™", "g·ª£i √Ω", "ƒë·ªÅ xu·∫•t", "c·∫ßn", "t√¨m ki·∫øm",
    "m√≥n ƒÉn", "th·ª±c ph·∫©m", "s·∫£n ph·∫©m", "dinh d∆∞·ª°ng", "ƒÉn u·ªëng", "ch·∫ø ƒë·ªô ƒÉn", "gi·∫£m gi√°", "c√¥ng th·ª©c"
];

// üîπ L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ database ƒë·ªÉ th√™m v√†o validTopics
let validTopics = [
    // Ti·∫øng Vi·ªát
    "ƒÉn u·ªëng", "m√≥n ƒÉn", "c√¥ng th·ª©c", "dinh d∆∞·ª°ng", "th·ª±c ph·∫©m", 
    "nguy√™n li·ªáu", "ƒÉn ki√™ng", "ch·∫ø ƒë·ªô ƒÉn", "s·ª©c kh·ªèe", "gi·∫£m c√¢n", 
    "tƒÉng c√¢n", "protein", "vitamin", "keto", "low-carb", "ƒÉn chay", 
    "ƒë·ªì u·ªëng", "b·ªØa ƒÉn", "ch·∫•t b√©o", "carbs", "ƒë∆∞·ªùng", "ƒÉn v·∫∑t", 
    "b·ªØa s√°ng", "b·ªØa tr∆∞a", "b·ªØa t·ªëi", "tr√°ng mi·ªáng", "n∆∞·ªõc √©p", 
    "sinh t·ªë", "th·ª©c ƒÉn", "ƒë·ªì ƒÉn", "m·∫∑t h√†ng", "s·∫£n ph·∫©m", "th·ªãt", 
    "c√°", "rau", "tr√°i c√¢y", "s·ªØa", "ph√¥ mai", "b√°nh m√¨", "g·∫°o", 
    "m√¨", "gia v·ªã", "d·∫ßu ƒÉn", "n∆∞·ªõc ch·∫•m", "th·ª©c u·ªëng", "tr√†", "c√† ph√™", 
    "nƒÉng l∆∞·ª£ng", "cholesterol", "ƒë·∫°m", "kho√°ng ch·∫•t", "ch·∫•t x∆°", 
    "healthy", "l√†nh m·∫°nh", "t·∫≠p luy·ªán", "th·ªÉ d·ª•c", "b√©o ph√¨", "ti·ªÉu ƒë∆∞·ªùng", "k·∫ø ho·∫°chho·∫°ch", "ngh√®o", "√≠t ti·ªÅn", "gi√° r·∫ª", "th·ª±c ph·∫©m gi√° r·∫ª", "th·ª±c ph·∫©m ti·∫øt ki·ªám", "th·ª±c ph·∫©m b√¨nh d√¢n",
    "th·ª±c ph·∫©m h·ªØu c∆°", "th·ª±c ph·∫©m s·∫°ch", "th·ª±c ph·∫©m an to√†n", "th·ª±c ph·∫©m t∆∞∆°i s·ªëng", "th·ª±c ph·∫©m ch·∫ø bi·∫øn s·∫µn", "th·ª±c ph·∫©m dinh d∆∞·ª°ng", "th·ª±c ph·∫©m b·ªï sung", "th·ª±c ph·∫©m ch·ª©c nƒÉng", "th·ª±c ph·∫©m ti·ªán l·ª£i", "th·ª±c ph·∫©m nhanh ch√≥ng", "th·ª±c ph·∫©m d·ªÖ ch·∫ø bi·∫øn", "th·ª±c ph·∫©m d·ªÖ ƒÉn", "th·ª±c ph·∫©m ngon mi·ªáng", "th·ª±c ph·∫©m h·∫•p d·∫´n", "th·ª±c ph·∫©m b·ªï d∆∞·ª°ng", "c·∫£m c√∫m", "s·ªët", "ƒë√£i ti·ªác", "sinh nh·∫≠t", "m·ª´ng tu·ªïi", "m·ª´ng th·ªç", "b√∫n b√≤", "ph·ªü", "c∆°m t·∫•m", "b√°nh m√¨", "h·ªß ti·∫øu", "b√°nh x√®o", "g·ªèi cu·ªën", "ch·∫£ gi√≤", "b√°nh tr√°ng", "b√°nh bao", "b√°nh b·ªôt l·ªçc", "b√°nh b√®o", "b√°nh ƒë√∫c", "b√°nh ch∆∞ng", "b√°nh t√©t", "b√°nh trung thu", "b√°nh kem", "b√°nh sinh nh·∫≠t",

    // Ti·∫øng Anh
    "food", "nutrition", "health", "diet", "calories", "protein", 
    "vitamins", "low-carb", "keto", "vegan", "vegetarian", "drink", 
    "beverage", "meal", "breakfast", "lunch", "dinner", "snack", 
    "dessert", "juice", "smoothie", "ingredient", "recipe", "fat", 
    "carbs", "sugar", "meat", "fish", "vegetable", "fruit", "milk", 
    "cheese", "bread", "rice", "noodle", "spice", "oil", "sauce", 
    "tea", "coffee", "energy", "cholesterol", "fiber", "mineral", 
    "weight loss", "weight gain", "healthy", "exercise", "fitness", 
    "obesity", "diabetes", "product", "item", "groceries"
];

// üîπ L·∫•y t√™n s·∫£n ph·∫©m t·ª´ b·∫£ng products v√† th√™m v√†o validTopics
connection.query("SELECT name FROM products", (err, results) => {
    if (err) {
        console.log("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m cho validTopics:", err.message || err);
        return;
    }

    const productNames = results.map(product => product.name.toLowerCase());
    validTopics = [...validTopics, ...productNames].map(topic => removeAccents(topic.toLowerCase()));
    console.log("‚úÖ ƒê√£ th√™m t√™n s·∫£n ph·∫©m v√†o validTopics:", productNames);
});

// API x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ª±c ph·∫©m
router.post("/ask-ai", verifyToken, askAiLimiter, async (req, res) => {
    console.log(`üì© Nh·∫≠n request t·ª´ user ${req.user.id}: ${req.body.userPrompt}`);
    let { userPrompt } = req.body;
    const userId = req.user.id;

    if (!userPrompt) {
        return res.status(400).json({ message: "Thi·∫øu userPrompt" });
    }

    userPrompt = userPrompt.trim();
    const normalizedPrompt = removeAccents(userPrompt.toLowerCase());
    let responseLanguage = "vi"; // M·∫∑c ƒë·ªãnh tr·∫£ l·ªùi ti·∫øng Vi·ªát

    const isVietnamese = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/.test(userPrompt);
    if (!isVietnamese) {
        responseLanguage = "en";
    }

    const isValidTopic = validTopics.some(topic => normalizedPrompt.includes(topic));
    if (!isValidTopic) {
        return res.status(400).json({ message: "Ch·ªâ h·ªó tr·ª£ c√¢u h·ªèi v·ªÅ th·ª±c ph·∫©m, s·ª©c kh·ªèe, dinh d∆∞·ª°ng ho·∫∑c s·∫£n ph·∫©m!" });
    }

    const cacheKey = `ai_response:${userPrompt.trim().toLowerCase()}`;
    const cachedResponse = cache.get(cacheKey);
    if (cachedResponse) {
        console.log("‚úÖ Cache hit for key:", cacheKey);
        return res.json(cachedResponse);
    } else {
        console.log("‚ùå Cache miss for key:", cacheKey);
    }

    try {
        connection.query(
            "SELECT product_id, name, images, nutrients, price, brand, category, ingredients, main_category FROM products",
            async (err, results) => {
                if (err) {
                    console.log("‚ùå Database error:", err.message || err);
                    return res.status(500).json({ message: "L·ªói database", error: err.message || err });
                }

                const productList = results.map((product) => product.name).join(", ");
                const productsWithDetails = results.reduce((acc, product) => {
                    let imageUrl = product.images;
                    try {
                        if (imageUrl && imageUrl.startsWith("[")) {
                            const imagesArray = JSON.parse(imageUrl);
                            imageUrl = imagesArray.length > 0 ? imagesArray[0] : null;
                        }
                    } catch (error) {
                        imageUrl = null;
                    }

                    acc[removeAccents(product.name.toLowerCase())] = {
                        product_id: product.product_id,
                        images: imageUrl,
                        nutrients: product.nutrients,
                        price: product.price,
                        brand: product.brand,
                        category: product.category,
                        ingredients: product.ingredients,
                        main_category: product.main_category,
                        originalName: product.name
                    };
                    return acc;
                }, {});

                const promptWords = normalizedPrompt.split(" ");
                const mentionedProductsInPrompt = [];
                for (const productName in productsWithDetails) {
                    const normalizedProductName = productName.split(" ");
                    const matchingWords = normalizedProductName.filter(word => promptWords.includes(word));
                    if (matchingWords.length >= 2 || normalizedPrompt.includes(productName)) {
                        const productData = productsWithDetails[productName];
                        mentionedProductsInPrompt.push({
                            name: productData.originalName,
                            product_id: productData.product_id,
                            images: productData.images,
                            nutrients: productData.nutrients,
                            price: productData.price,
                            brand: productData.brand,
                            category: productData.category,
                            ingredients: productData.ingredients,
                            main_category: productData.main_category,
                            detailLink: `/products/${productData.product_id}`
                        });
                    }
                }

                let aiPrompt = responseLanguage === "en"
                    ? `Available products: ${productList}. User asked: "${userPrompt}". Answer concisely in English, under 100 words, mentioning specific products if relevant.`
                    : `Danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn: ${productList}. Ng∆∞·ªùi d√πng h·ªèi: "${userPrompt}". Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, d∆∞·ªõi 100 t·ª´, ƒë·ªÅ c·∫≠p s·∫£n ph·∫©m c·ª• th·ªÉ n·∫øu li√™n quan.`;

                try {
                    const aiResponse = await geminiQueue.add(() =>
                        axios.post(
                            "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent",
                            {
                                contents: [{ role: "user", parts: [{ text: aiPrompt }] }]
                            },
                            {
                                headers: { "Content-Type": "application/json" },
                                params: { key: process.env.GEMINI_API_KEY },
                            }
                        )
                    );

                    const answer = aiResponse.data.candidates[0]?.content?.parts[0]?.text || "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi.";
                    const cleanedAnswer = answer.replace(/\*/g, "");
                    const normalizedAnswer = removeAccents(cleanedAnswer.toLowerCase());
                    const answerWords = normalizedAnswer.split(" ");

                    const mentionedProductsInAnswer = [];
                    for (const productName in productsWithDetails) {
                        const normalizedProductName = productName.split(" ");
                        const matchingWords = normalizedProductName.filter(word => answerWords.includes(word));
                        if (matchingWords.length >= 2 || normalizedAnswer.includes(productName)) {
                            const productData = productsWithDetails[productName];
                            mentionedProductsInAnswer.push({
                                name: productData.originalName,
                                product_id: productData.product_id,
                                images: productData.images,
                                nutrients: productData.nutrients,
                                price: productData.price,
                                brand: productData.brand,
                                category: productData.category,
                                ingredients: productData.ingredients,
                                main_category: productData.main_category,
                                detailLink: `/products/${productData.product_id}`
                            });
                        }
                    }

                    let mentionedProducts = [...mentionedProductsInPrompt, ...mentionedProductsInAnswer];
                    mentionedProducts = mentionedProducts.filter(
                        (product, index, self) =>
                            index === self.findIndex(p => p.product_id === product.product_id)
                    );

                    mentionedProducts = mentionedProducts.filter(product => {
                        const normalizedProductName = removeAccents(product.name.toLowerCase());
                        return normalizedPrompt.includes(normalizedProductName) || normalizedAnswer.includes(normalizedProductName);
                    });

                    connection.query(
                        "INSERT INTO chat_history (user_id, message, response) VALUES (?, ?, ?)",
                        [userId, userPrompt, cleanedAnswer],
                        (err) => {
                            if (err) console.log("‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ chat:", err.message || err);
                        }
                    );

                    const responseToCache = {
                        success: true,
                        userPrompt,
                        answer: cleanedAnswer,
                        mentionedProducts: mentionedProducts.length > 0 ? mentionedProducts : null
                    };

                    cache.put(cacheKey, responseToCache, 3600 * 1000);
                    console.log("‚úÖ Cached response for key:", cacheKey);

                    res.json(responseToCache);
                } catch (error) {
                    // ... (gi·ªØ nguy√™n x·ª≠ l√Ω l·ªói)
                }
            }
        );
    }catch (error) {
        console.log("‚ùå L·ªói server:", error);
        res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
    }
});

module.exports = router;