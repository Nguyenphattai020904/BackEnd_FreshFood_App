const express = require("express");
const connection = require("../db");
const verifyToken = require("../middleware/auth");
const axios = require("axios");
require("dotenv").config();

const router = express.Router();

// Danh s√°ch t·ª´ kh√≥a li√™n quan ƒë·∫øn th·ª±c ph·∫©m, s·ª©c kh·ªèe, dinh d∆∞·ª°ng, m·∫∑t h√†ng
const validTopics = [
    // Ti·∫øng Vi·ªát
    "ƒÉn u·ªëng", "m√≥n ƒÉn", "c√¥ng th·ª©c", "dinh d∆∞·ª°ng", "th·ª±c ph·∫©m", 
    "nguy√™n li·ªáu", "ƒÉn ki√™ng", "ch·∫ø ƒë·ªô ƒÉn", "s·ª©c kh·ªèe", "gi·∫£m c√¢n", 
    "tƒÉng c√¢n", "protein", "vitamin", "keto", "low-carb", "ƒÉn chay", 
    "ƒë·ªì u·ªëng", "b·ªØa ƒÉn", "ch·∫•t b√©o", "carbs", "ƒë∆∞·ªùng", "ƒÉn v·∫∑t", 
    "b·ªØa s√°ng", "b·ªØa tr∆∞a", "b·ªØa t·ªëi", "tr√°ng mi·ªáng", "n∆∞·ªõc √©p", 
    "sinh t·ªë", "th·ª©c ƒÉn", "ƒë·ªì ƒÉn", "m·∫∑t h√†ng", "s·∫£n ph·∫©m", "th·ªãt", 
    "c√°", "rau", "tr√°i c√¢y", "s·ªØa", "ph√¥ mai", "b√°nh m√¨", "g·∫°o", 
    "m√¨", "gia v·ªã", "d·∫ßu ƒÉn", "n∆∞·ªõc ch·∫•m", "th·ª©c u·ªëng", "tr√†", "c√† ph√™", 
    "nƒÉng l∆∞·ª£ng", "cholesterol", "ƒë·∫°m", "kho√°ng ch·∫•t", "ch·∫•t x∆°", 
    "healthy", "l√†nh m·∫°nh", "t·∫≠p luy·ªán", "th·ªÉ d·ª•c", "b√©o ph√¨", "ti·ªÉu ƒë∆∞·ªùng",

    // Ti·∫øng Anh
    "food", "nutrition", "health", "diet", "calories", "protein", 
    "vitamins", "low-carb", "keto", "vegan", "vegetarian", "drink", 
    "beverage", "meal", "breakfast", "lunch", "dinner", "snack", 
    "dessert", "juice", "smoothie", "ingredient", "recipe", "fat", 
    "carbs", "sugar", "meat", "fish", "vegetable", "fruit", "milk", 
    "cheese", "bread", "rice", "noodle", "spice", "oil", "sauce", 
    "tea", "coffee", "energy", "cholesterol", "fiber", "mineral", 
    "weight loss", "weight gain", "healthy", "exercise", "fitness", 
    "obesity", "diabetes", "product", "item", "groceries"
].map(topic => topic.toLowerCase());

// H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
const removeAccents = (str) => {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ƒë/g, "d").replace(/ƒê/g, "D");
};

// API x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ª±c ph·∫©m
router.post("/ask-ai", verifyToken, async (req, res) => {
    let { userPrompt } = req.body;
    const userId = req.user.id;

    if (!userPrompt) {
        return res.status(400).json({ message: "Thi·∫øu userPrompt" });
    }

    userPrompt = userPrompt.trim();
    const normalizedPrompt = removeAccents(userPrompt.toLowerCase());
    let responseLanguage = "vi"; // M·∫∑c ƒë·ªãnh tr·∫£ l·ªùi ti·∫øng Vi·ªát

    // üîπ X√°c ƒë·ªãnh ng√¥n ng·ªØ c·ªßa c√¢u h·ªèi (Vi·ªát hay Anh)
    const isVietnamese = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/.test(userPrompt);
    if (!isVietnamese) {
        responseLanguage = "en"; // N·∫øu kh√¥ng c√≥ k√Ω t·ª± ti·∫øng Vi·ªát, gi·∫£ ƒë·ªãnh l√† ti·∫øng Anh
    }

    // üîπ Ki·ªÉm tra c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn th·ª±c ph·∫©m kh√¥ng (H·ªó tr·ª£ c·∫£ ti·∫øng Anh)
    const isValidTopic = validTopics.some(topic => normalizedPrompt.includes(removeAccents(topic)));
    if (!isValidTopic) {
        return res.status(400).json({ message: "Ch·ªâ h·ªó tr·ª£ c√¢u h·ªèi v·ªÅ th·ª±c ph·∫©m, s·ª©c kh·ªèe, dinh d∆∞·ª°ng!" });
    }

    try {
        // üîπ L·∫•y danh s√°ch **10 s·∫£n ph·∫©m ƒë·∫ßu ti√™n** ƒë·ªÉ t·ªëi ∆∞u
        connection.query("SELECT name FROM products LIMIT 10", async (err, results) => {
            if (err) {
                console.log("‚ùå Database error:", err.sqlMessage);
                return res.status(500).json({ message: "L·ªói database", error: err.sqlMessage });
            }

            // Chuy·ªÉn danh s√°ch s·∫£n ph·∫©m th√†nh chu·ªói
            const productList = results.map((product) => product.name).join(", ");
            
            // üîπ T·∫°o prompt g·ª≠i ƒë·∫øn AI (R√∫t g·ªçn c√¢u tr·∫£ l·ªùi t·ªëi ƒëa 100 t·ª´)
            let aiPrompt = responseLanguage === "en"
                ? `Available products: ${productList}. User asked: "${userPrompt}". Answer concisely in English, under 100 words.`
                : `Danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn: ${productList}. Ng∆∞·ªùi d√πng h·ªèi: "${userPrompt}". Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, d∆∞·ªõi 100 t·ª´.`;

            try {
                const aiResponse = await axios.post(
                    "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent",
                    {
                        contents: [{ role: "user", parts: [{ text: aiPrompt }] }]
                    },
                    {
                        headers: { "Content-Type": "application/json" },
                        params: { key: process.env.GEMINI_API_KEY },
                    }
                );

                const answer = aiResponse.data.candidates[0]?.content?.parts[0]?.text || "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi.";
                const cleanedAnswer = answer.replace(/\*/g, ""); // X√≥a d·∫•u * ƒë·ªÉ tr√°nh m·∫•t th·∫©m m·ªπ

                // üîπ L∆∞u l·ªãch s·ª≠ chat v√†o database
                connection.query(
                    "INSERT INTO chat_history (user_id, message, response) VALUES (?, ?, ?)",
                    [userId, userPrompt, cleanedAnswer],
                    (err) => {
                        if (err) console.log("‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ chat:", err.sqlMessage);
                    }
                );

                res.json({ userPrompt, answer: cleanedAnswer });
            } catch (error) {
                console.log("‚ùå L·ªói AI Gemini:", error.message);
                res.status(500).json({ message: "L·ªói AI", error: error.message });
            }
        });
    } catch (error) {
        console.log("‚ùå L·ªói server:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});

module.exports = router;