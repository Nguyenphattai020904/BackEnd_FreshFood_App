const express = require("express");
const connection = require("../db");
const verifyToken = require("../middleware/auth");
const axios = require("axios");
const axiosRetry = require("axios-retry").default;
const rateLimit = require("express-rate-limit");
const cache = require("memory-cache");
require("dotenv").config();

const router = express.Router();

// Kh·ªüi t·∫°o PQueue b·∫•t ƒë·ªìng b·ªô
let geminiQueue;

(async () => {
    const { default: PQueue } = await import("p-queue");
    geminiQueue = new PQueue({
        concurrency: 1,
        intervalCap: 1,
        interval: 2000,
    });
})();

// C·∫•u h√¨nh axios-retry
axiosRetry(axios, {
    retries: 5,
    retryDelay: (retryCount, error) => {
        const retryAfter = error.response?.headers["retry-after"] || retryCount * 10;
        console.log(`‚è≥ Ch·ªù ${retryAfter} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        return retryAfter * 1000;
    },
    retryCondition: (error) => error.response?.status === 429,
});

// C·∫•u h√¨nh rate limiting
const askAiLimiter = rateLimit({
    windowMs: 60 * 1000,
    max: 10,
    keyGenerator: (req) => req.user.id,
    message: "B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau 1 ph√∫t.",
});

// H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
const removeAccents = (str) => {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ƒë/g, "d").replace(/ƒê/g, "D");
};

// üîπ Danh s√°ch t·ª´ kh√≥a k√≠ch ho·∫°t
const triggerKeywords = [
    "danh s√°ch", "h√£y l·∫•y", "l·∫•y cho tui", "l·∫•y", "mu·ªën", "nguy√™n li·ªáu", "c√¥ng th·ª©c",
    "cho tui", "t√¨m", "c√≥ nh·ªØng", "li·ªát k√™", "g·ª£i √Ω", "ƒë·ªÅ xu·∫•t", "c·∫ßn", "t√¨m ki·∫øm",
    "m√≥n ƒÉn", "th·ª±c ph·∫©m", "s·∫£n ph·∫©m", "dinh d∆∞·ª°ng", "ƒÉn u·ªëng", "ch·∫ø ƒë·ªô ƒÉn", "gi·∫£m gi√°",
    "s·ªë l∆∞·ª£ng", "c√≤n bao nhi√™u", "t·ªìn kho", "c√≤n l·∫°i", "ƒë·∫∑c s·∫£n", "n·ªïi ti·∫øng", "ƒë·∫∑c tr∆∞ng"
];

// üîπ Danh s√°ch validTopics
let validTopics = [
    "ƒÉn u·ªëng", "m√≥n ƒÉn", "c√¥ng th·ª©c", "dinh d∆∞·ª°ng", "th·ª±c ph·∫©m", "nguy√™n li·ªáu", "ƒÉn ki√™ng",
    "ch·∫ø ƒë·ªô ƒÉn", "s·ª©c kh·ªèe", "gi·∫£m c√¢n", "tƒÉng c√¢n", "protein", "vitamin", "keto", "low-carb",
    "ƒÉn chay", "ƒë·ªì u·ªëng", "b·ªØa ƒÉn", "ch·∫•t b√©o", "carbs", "ƒë∆∞·ªùng", "ƒÉn v·∫∑t", "b·ªØa s√°ng",
    "b·ªØa tr∆∞a", "b·ªØa t·ªëi", "tr√°ng mi·ªáng", "n∆∞·ªõc √©p", "sinh t·ªë", "th·ª©c ƒÉn", "ƒë·ªì ƒÉn", "m·∫∑t h√†ng",
    "s·∫£n ph·∫©m", "th·ªãt", "c√°", "rau", "tr√°i c√¢y", "s·ªØa", "ph√¥ mai", "b√°nh m√¨", "g·∫°o", "m√¨",
    "gia v·ªã", "d·∫ßu ƒÉn", "n∆∞·ªõc ch·∫•m", "th·ª©c u·ªëng", "tr√†", "c√† ph√™", "nƒÉng l∆∞·ª£ng", "cholesterol",
    "ƒë·∫°m", "kho√°ng ch·∫•t", "ch·∫•t x∆°", "healthy", "l√†nh m·∫°nh", "t·∫≠p luy·ªán", "th·ªÉ d·ª•c", "b√©o ph√¨",
    "ti·ªÉu ƒë∆∞·ªùng", "k·∫ø ho·∫°ch", "ngh√®o", "√≠t ti·ªÅn", "gi√° r·∫ª", "th·ª±c ph·∫©m gi√° r·∫ª", "th·ª±c ph·∫©m ti·∫øt ki·ªám",
    "th·ª±c ph·∫©m b√¨nh d√¢n", "th·ª±c ph·∫©m h·ªØu c∆°", "th·ª±c ph·∫©m s·∫°ch", "th·ª±c ph·∫©m an to√†n", "th·ª±c ph·∫©m t∆∞∆°i s·ªëng",
    "th·ª±c ph·∫©m ch·∫ø bi·∫øn s·∫µn", "th·ª±c ph·∫©m dinh d∆∞·ª°ng", "th·ª±c ph·∫©m b·ªï sung", "th·ª±c ph·∫©m ch·ª©c nƒÉng",
    "th·ª±c ph·∫©m ti·ªán l·ª£i", "th·ª±c ph·∫©m nhanh ch√≥ng", "th·ª±c ph·∫©m d·ªÖ ch·∫ø bi·∫øn", "th·ª±c ph·∫©m d·ªÖ ƒÉn",
    "th·ª±c ph·∫©m ngon mi·ªáng", "th·ª±c ph·∫©m h·∫•p d·∫´n", "th·ª±c ph·∫©m b·ªï d∆∞·ª°ng", "c·∫£m c√∫m", "s·ªët", "ƒë√£i ti·ªác",
    "sinh nh·∫≠t", "m·ª´ng tu·ªïi", "m·ª´ng th·ªç", "b√∫n b√≤", "ph·ªü", "c∆°m t·∫•m", "b√°nh m√¨", "h·ªß ti·∫øu", "b√°nh x√®o",
    "g·ªèi cu·ªën", "ch·∫£ gi√≤", "b√°nh tr√°ng", "b√°nh bao", "b√°nh b·ªôt l·ªçc", "b√°nh b√®o", "b√°nh ƒë√∫c", "b√°nh ch∆∞ng",
    "b√°nh t√©t", "b√°nh trung thu", "b√°nh kem", "b√°nh sinh nh·∫≠t", "ƒë·∫∑c s·∫£n", "n·ªïi ti·∫øng", "ƒë·∫∑c tr∆∞ng",
    // Ti·∫øng Anh
    "food", "nutrition", "health", "diet", "calories", "protein", "vitamins", "low-carb", "keto",
    "vegan", "vegetarian", "drink", "beverage", "meal", "breakfast", "lunch", "dinner", "snack",
    "dessert", "juice", "smoothie", "ingredient", "recipe", "fat", "carbs", "sugar", "meat", "fish",
    "vegetable", "fruit", "milk", "cheese", "bread", "rice", "noodle", "spice", "oil", "sauce",
    "tea", "coffee", "energy", "cholesterol", "fiber", "mineral", "weight loss", "weight gain",
    "healthy", "exercise", "fitness", "obesity", "diabetes", "product", "item", "groceries"
];

// üîπ Th√¥ng tin ƒë·∫∑c s·∫£n
const specialtyInfo = {
    "toi ly son": "T·ªèi L√Ω S∆°n n·ªïi ti·∫øng v·ªõi h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†, cay n·ªìng, ƒë∆∞·ª£c tr·ªìng tr√™n ƒë·∫•t n√∫i l·ª≠a ·ªü ƒë·∫£o L√Ω S∆°n, Qu·∫£ng Ng√£i.",
    "xoai cat hoa loc": "Xo√†i C√°t H√≤a L·ªôc c√≥ v·ªã ng·ªçt thanh, th·ªãt ch·∫Øc, th∆°m, l√† ƒë·∫∑c s·∫£n n·ªïi ti·∫øng c·ªßa Ti·ªÅn Giang.",
    "nhan long hung yen": "Nh√£n L·ªìng H∆∞ng Y√™n ng·ªçt ƒë·∫≠m, c√πi d√†y, h·∫°t nh·ªè, ƒë∆∞·ª£c xem l√† lo·∫°i nh√£n ngon nh·∫•t Vi·ªát Nam.",
    "que tra bong": "Qu·∫ø Tr√† B·ªìng t·ª´ Qu·∫£ng Ng√£i c√≥ m√πi th∆°m n·ªìng, tinh d·∫ßu cao, ƒë∆∞·ª£c d√πng trong ·∫©m th·ª±c v√† y h·ªçc.",
    "vu sua lo ren": "V√∫ S·ªØa L√≤ R√®n ·ªü Vƒ©nh Kim, Ti·ªÅn Giang, ng·ªçt thanh, m·ªÅm m·ªãn, l√† tr√°i c√¢y ƒë·∫∑c s·∫£n mi·ªÅn T√¢y.",
    "vai thieu luc ngan": "V·∫£i Thi·ªÅu L·ª•c Ng·∫°n, B·∫Øc Giang, c√≥ v·ªã ng·ªçt ƒë·∫≠m, m·ªçng n∆∞·ªõc, l√† lo·∫°i v·∫£i n·ªïi ti·∫øng c·∫£ n∆∞·ªõc.",
    "chanh day lam dong": "Chanh D√¢y L√¢m ƒê·ªìng chua d·ªãu, th∆°m, gi√†u vitamin C, l√† ƒë·∫∑c s·∫£n v√πng cao nguy√™n.",
    "muoi tay ninh": "Mu·ªëi T√¢y Ninh, ƒë·∫∑c bi·ªát l√† mu·ªëi t√¥m, c√≥ v·ªã m·∫∑n, cay, th∆°m, d√πng ƒë·ªÉ ch·∫•m tr√°i c√¢y.",
    "ca phe buon me thuot": "C√† Ph√™ Bu√¥n M√™ Thu·ªôt ƒë·∫≠m ƒë√†, th∆°m n·ªìng, l√† bi·ªÉu t∆∞·ª£ng c√† ph√™ Vi·ªát Nam t·ª´ ƒê·∫Øk L·∫Øk.",
    "ho tieu phu quoc": "H·ªì Ti√™u Ph√∫ Qu·ªëc cay n·ªìng, th∆°m ƒë·∫∑c tr∆∞ng, ƒë∆∞·ª£c tr·ªìng tr√™n ƒë·∫£o ng·ªçc Ki√™n Giang.",
};

// üîπ L·∫•y t√™n s·∫£n ph·∫©m t·ª´ b·∫£ng products v√† th√™m v√†o validTopics
connection.query("SELECT name FROM products", (err, results) => {
    if (err) {
        console.log("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m cho validTopics:", err.message || err);
        return;
    }

    const productNames = results.map(product => product.name.toLowerCase());
    validTopics = [...validTopics, ...productNames].map(topic => removeAccents(topic.toLowerCase()));
    console.log("‚úÖ ƒê√£ th√™m t√™n s·∫£n ph·∫©m v√†o validTopics:", productNames);
});

// H√†m ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi t·ª´ AI
function formatAiResponse(answer) {
    // Thay th·∫ø nhi·ªÅu k√Ω t·ª± xu·ªëng d√≤ng th·ª´a
    answer = answer.replace(/\n\s*\n+/g, "\n\n");

    // Chuy·ªÉn c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát th√†nh danh s√°ch
    const lines = answer.split("\n");
    let formattedLines = [];
    let inList = false;

    for (let line of lines) {
        line = line.trim();
        if (!line) continue;

        // Ki·ªÉm tra n·∫øu l√† m·ª•c danh s√°ch (b·∫Øt ƒë·∫ßu b·∫±ng s·ªë, -, *, ho·∫∑c ‚Ä¢)
        if (line.match(/^\d+\.\s|^[\-\*‚Ä¢]\s/)) {
            if (!inList) {
                inList = true;
            }
            // Chu·∫©n h√≥a th√†nh k√Ω t·ª± g·∫°ch ƒë·∫ßu d√≤ng
            line = line.replace(/^\d+\.\s|^[\-\*‚Ä¢]\s/, "- ");
            formattedLines.push(line);
        } else {
            if (inList) {
                inList = false;
            }
            formattedLines.push(line);
        }
    }

    // Th√™m xu·ªëng d√≤ng gi·ªØa c√°c ƒëo·∫°n
    return formattedLines.join("\n");
}

// H√†m ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho th·∫•p
const checkLowInventory = (quantity) => {
    const LOW_INVENTORY_THRESHOLD = 10; // Ng∆∞·ª°ng c·∫£nh b√°o t·ªìn kho th·∫•p
    return quantity <= LOW_INVENTORY_THRESHOLD 
        ? ` (C·∫£nh b√°o: S·ªë l∆∞·ª£ng th·∫•p, ch·ªâ c√≤n ${quantity} ƒë∆°n v·ªã!)` 
        : ` (${quantity} ƒë∆°n v·ªã)`;
};

// API x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ª±c ph·∫©m
router.post("/ask-ai", verifyToken, askAiLimiter, async (req, res) => {
    console.log(`üì© Nh·∫≠n request t·ª´ user ${req.user.id}: ${req.body.userPrompt}`);
    let { userPrompt } = req.body;
    const userId = req.user.id;

    if (!userPrompt) {
        return res.status(400).json({ message: "Thi·∫øu userPrompt" });
    }

    userPrompt = userPrompt.trim();
    const normalizedPrompt = removeAccents(userPrompt.toLowerCase());
    let responseLanguage = "vi"; // M·∫∑c ƒë·ªãnh tr·∫£ l·ªùi ti·∫øng Vi·ªát

    const isVietnamese = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/.test(userPrompt);
    if (!isVietnamese) {
        responseLanguage = "en";
    }

    const isValidTopic = validTopics.some(topic => normalizedPrompt.includes(topic));
    if (!isValidTopic) {
        return res.status(400).json({ message: "Ch·ªâ h·ªó tr·ª£ c√¢u h·ªèi v·ªÅ th·ª±c ph·∫©m, s·ª©c kh·ªèe, dinh d∆∞·ª°ng ho·∫∑c s·∫£n ph·∫©m!" });
    }

    const cacheKey = `ai_response:${userPrompt.trim().toLowerCase()}`;
    const cachedResponse = cache.get(cacheKey);
    if (cachedResponse) {
        console.log("‚úÖ Cache hit for key:", cacheKey);
        return res.json(cachedResponse);
    } else {
        console.log("‚ùå Cache miss for key:", cacheKey);
    }

    try {
        connection.query(
            "SELECT product_id, name, images, nutrients, price, brand, category, ingredients, main_category, quantity FROM products",
            async (err, results) => {
                if (err) {
                    console.log("‚ùå Database error:", err.message || err);
                    return res.status(500).json({ message: "L·ªói database", error: err.message || err });
                }

                const productList = results.map((product) => product.name).join(", ");
                const productsWithDetails = results.reduce((acc, product) => {
                    let imageUrl = product.images;
                    try {
                        if (imageUrl && imageUrl.startsWith("[")) {
                            const imagesArray = JSON.parse(imageUrl);
                            imageUrl = imagesArray.length > 0 ? imagesArray[0] : null;
                        }
                    } catch (error) {
                        imageUrl = null;
                    }

                    acc[removeAccents(product.name.toLowerCase())] = {
                        product_id: product.product_id,
                        images: imageUrl,
                        nutrients: product.nutrients,
                        price: product.price,
                        brand: product.brand,
                        category: product.category,
                        ingredients: product.ingredients,
                        main_category: product.main_category,
                        quantity: product.quantity,
                        originalName: product.name
                    };
                    return acc;
                }, {});

                const promptWords = normalizedPrompt.split(" ");
                const mentionedProductsInPrompt = [];
                for (const productName in productsWithDetails) {
                    const normalizedProductName = productName.split(" ");
                    const matchingWords = normalizedProductName.filter(word => promptWords.includes(word));
                    if (matchingWords.length >= 2 || normalizedPrompt.includes(productName)) {
                        const productData = productsWithDetails[productName];
                        mentionedProductsInPrompt.push({
                            name: productData.originalName,
                            product_id: productData.product_id,
                            images: productData.images,
                            nutrients: productData.nutrients,
                            price: productData.price,
                            brand: productData.brand,
                            category: productData.category,
                            ingredients: productData.ingredients,
                            main_category: productData.main_category,
                            quantity: productData.quantity,
                            detailLink: `/products/${productData.product_id}`
                        });
                    }
                }

                let responseToCache;

                // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·ªë l∆∞·ª£ng
                if (
                    normalizedPrompt.includes("so luong") || 
                    normalizedPrompt.includes("con bao nhieu") || 
                    normalizedPrompt.includes("ton kho") ||
                    normalizedPrompt.includes("con lai")
                ) {
                    let answer = "";
                    let mentionedProducts = [];

                    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m n·∫øu kh√¥ng ƒë·ªÅ c·∫≠p s·∫£n ph·∫©m c·ª• th·ªÉ
                    if (mentionedProductsInPrompt.length === 0 && normalizedPrompt.includes("tat ca")) {
                        const lowInventoryProducts = results
                            .filter(product => product.quantity < 20) // L·ªçc s·∫£n ph·∫©m c√≥ t·ªìn kho < 20
                            .slice(0, 5) // Gi·ªõi h·∫°n 5 s·∫£n ph·∫©m
                            .map(product => {
                                let imageUrl = product.images;
                                try {
                                    if (imageUrl && imageUrl.startsWith("[")) {
                                        const imagesArray = JSON.parse(imageUrl);
                                        imageUrl = imagesArray.length > 0 ? imagesArray[0] : null;
                                    }
                                } catch (error) {
                                    imageUrl = null;
                                }
                                return {
                                    name: product.name,
                                    product_id: product.product_id,
                                    images: imageUrl,
                                    price: product.price,
                                    quantity: product.quantity,
                                    detailLink: `/products/${product.product_id}`
                                };
                            });

                        if (lowInventoryProducts.length > 0) {
                            answer = "S·ªë l∆∞·ª£ng t·ªìn kho c·ªßa c√°c s·∫£n ph·∫©m (m·∫´u):\n" + 
                                lowInventoryProducts
                                    .map(p => `- ${p.name}: ${checkLowInventory(p.quantity)} (Gi√°: ${p.price} VNƒê)`)
                                    .join("\n");
                            mentionedProducts = lowInventoryProducts;
                        } else {
                            answer = "T·∫•t c·∫£ s·∫£n ph·∫©m hi·ªán t·∫°i ƒë·ªÅu c√≥ s·ªë l∆∞·ª£ng t·ªìn kho ƒë·ªß (tr√™n 20 ƒë∆°n v·ªã).";
                        }
                    } else if (mentionedProductsInPrompt.length > 0) {
                        // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ
                        mentionedProducts = mentionedProductsInPrompt.map(product => ({
                            name: product.name,
                            product_id: product.product_id,
                            images: product.images,
                            price: product.price,
                            quantity: product.quantity,
                            detailLink: `/products/${product.product_id}`
                        }));
                        answer = mentionedProducts
                            .map(p => `S·ªë l∆∞·ª£ng ${p.name} c√≤n ${checkLowInventory(p.quantity)} (Gi√°: ${p.price} VNƒê).`)
                            .join("\n");
                    } else {
                        answer = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong c√¢u h·ªèi. Vui l√≤ng ch·ªâ r√µ t√™n s·∫£n ph·∫©m ho·∫∑c h·ªèi v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m (v√≠ d·ª•: 't·ªìn kho t·∫•t c·∫£').";
                    }

                    responseToCache = {
                        success: true,
                        userPrompt,
                        answer,
                        mentionedProducts: mentionedProducts.length > 0 ? mentionedProducts : null
                    };

                    cache.put(cacheKey, responseToCache, 3600 * 1000);
                    console.log("‚úÖ Cached response for key:", cacheKey);
                    connection.query(
                        "INSERT INTO chat_history (user_id, message, response) VALUES (?, ?, ?)",
                        [userId, userPrompt, answer],
                        (err) => {
                            if (err) console.log("‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ chat:", err.message || err);
                        }
                    );
                    return res.json(responseToCache);
                }

                // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒë·∫∑c s·∫£n
                if (normalizedPrompt.includes("dac san") || normalizedPrompt.includes("noi tieng") || normalizedPrompt.includes("dac trung")) {
                    if (mentionedProductsInPrompt.length > 0) {
                        const product = mentionedProductsInPrompt[0];
                        const specialtyDescription = specialtyInfo[removeAccents(product.name.toLowerCase())] || 
                            `${product.name} l√† m·ªôt ƒë·∫∑c s·∫£n c·ªßa ${product.brand}, thu·ªôc lo·∫°i ${product.main_category}.`;
                        const answer = specialtyDescription;
                        responseToCache = {
                            success: true,
                            userPrompt,
                            answer,
                            mentionedProducts: [product]
                        };
                        cache.put(cacheKey, responseToCache, 3600 * 1000);
                        console.log("‚úÖ Cached response for key:", cacheKey);
                        connection.query(
                            "INSERT INTO chat_history (user_id, message, response) VALUES (?, ?, ?)",
                            [userId, userPrompt, answer],
                            (err) => {
                                if (err) console.log("‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ chat:", err.message || err);
                            }
                        );
                        return res.json(responseToCache);
                    } else {
                        const specialtyProducts = results
                            .filter(p => p.main_category === "ƒê·∫∑c S·∫£n Vi·ªát")
                            .map(p => p.name)
                            .slice(0, 3)
                            .join(", ");
                        const answer = `M·ªôt s·ªë ƒë·∫∑c s·∫£n Vi·ªát Nam n·ªïi ti·∫øng:\n- ${specialtyProducts.replace(/, /g, "\n- ")}.\nB·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ƒë·∫∑c s·∫£n n√†o?`;
                        responseToCache = {
                            success: true,
                            userPrompt,
                            answer,
                            mentionedProducts: null
                        };
                        cache.put(cacheKey, responseToCache, 3600 * 1000);
                        console.log("‚úÖ Cached response for key:", cacheKey);
                        connection.query(
                            "INSERT INTO chat_history (user_id, message, response) VALUES (?, ?, ?)",
                            [userId, userPrompt, answer],
                            (err) => {
                                if (err) console.log("‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ chat:", err.message || err);
                            }
                        );
                        return res.json(responseToCache);
                    }
                }

                // X·ª≠ l√Ω c√°c c√¢u h·ªèi kh√°c v·ªõi AI
                let aiPrompt = responseLanguage === "en"
                    ? `Available products: ${productList}. User asked: "${userPrompt}". Answer concisely in English, under 100 words, mentioning specific products if relevant. Use bullet points for lists and separate paragraphs with newlines.`
                    : `Danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn: ${productList}. Ng∆∞·ªùi d√πng h·ªèi: "${userPrompt}". Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, d∆∞·ªõi 100 t·ª´, ƒë·ªÅ c·∫≠p s·∫£n ph·∫©m c·ª• th·ªÉ n·∫øu li√™n quan. S·ª≠ d·ª•ng d·∫•u ƒë·∫ßu d√≤ng (-) cho danh s√°ch v√† xu·ªëng d√≤ng gi·ªØa c√°c ƒëo·∫°n.`;

                try {
                    const aiResponse = await geminiQueue.add(() =>
                        axios.post(
                            "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent",
                            {
                                contents: [{ role: "user", parts: [{ text: aiPrompt }] }]
                            },
                            {
                                headers: { "Content-Type": "application/json" },
                                params: { key: process.env.GEMINI_API_KEY },
                            }
                        )
                    );

                    let answer = aiResponse.data.candidates[0]?.content?.parts[0]?.text || "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi.";
                    console.log("üìù AI response before formatting:", answer);
                    answer = formatAiResponse(answer);
                    const cleanedAnswer = answer.replace(/\*+/g, "");
                    console.log("üìù AI response after formatting:", cleanedAnswer);

                    const normalizedAnswer = removeAccents(cleanedAnswer.toLowerCase());
                    const answerWords = normalizedAnswer.split(" ");

                    const mentionedProductsInAnswer = [];
                    for (const productName in productsWithDetails) {
                        const normalizedProductName = productName.split(" ");
                        const matchingWords = normalizedProductName.filter(word => answerWords.includes(word));
                        if (matchingWords.length >= 2 || normalizedAnswer.includes(productName)) {
                            const productData = productsWithDetails[productName];
                            mentionedProductsInAnswer.push({
                                name: productData.originalName,
                                product_id: productData.product_id,
                                images: productData.images,
                                nutrients: productData.nutrients,
                                price: productData.price,
                                brand: productData.brand,
                                category: productData.category | "Kh√¥ng x√°c ƒë·ªãnh",
                                ingredients: productData.ingredients,
                                main_category: productData.main_category,
                                quantity: productData.quantity,
                                detailLink: `/products/${productData.product_id}`
                            });
                        }
                    }

                    let mentionedProducts = [...mentionedProductsInPrompt, ...mentionedProductsInAnswer];
                    mentionedProducts = mentionedProducts.filter(
                        (product, index, self) =>
                            index === self.findIndex(p => p.product_id === product.product_id)
                    );

                    mentionedProducts = mentionedProducts.filter(product => {
                        const normalizedProductName = removeAccents(product.name.toLowerCase());
                        return normalizedPrompt.includes(normalizedProductName) || normalizedAnswer.includes(normalizedProductName);
                    });

                    connection.query(
                        "INSERT INTO chat_history (user_id, message, response) VALUES (?, ?, ?)",
                        [userId, userPrompt, cleanedAnswer],
                        (err) => {
                            if (err) console.log("‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ chat:", err.message || err);
                        }
                    );

                    responseToCache = {
                        success: true,
                        userPrompt,
                        answer: cleanedAnswer,
                        mentionedProducts: mentionedProducts.length > 0 ? mentionedProducts : null
                    };

                    cache.put(cacheKey, responseToCache, 3600 * 1000);
                    console.log("‚úÖ Cached response for key:", cacheKey);

                    res.json(responseToCache);
                } catch (error) {
                    console.log("‚ùå L·ªói khi g·ªçi Gemini API:", error.message || error);
                    res.status(500).json({ success: false, message: "L·ªói khi g·ªçi AI", error: error.message || error });
                }
            }
        );
    } catch (error) {
        console.log("‚ùå L·ªói server:", error);
        res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
    }
});

module.exports = router;